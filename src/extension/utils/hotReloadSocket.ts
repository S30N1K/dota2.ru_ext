import { sendToBackground} from "./communication";
import { extLogger } from "../../logger";

const log = new extLogger("extension/utils/hotReloadSocket.ts")

const wsPort = process.env.WEBSOCKET_PORT || "5896";
const RECONNECT_STEP = 5000;       // —à–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const MAX_RECONNECT_TIME = 60000;  // –º–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
const INITIAL_RECONNECT_DELAY = 5000;

export function startHotReloadSocket() {
    let retryDelay = INITIAL_RECONNECT_DELAY;
    let totalWaitTime = 0;

    const connect = () => {
        const ws = new WebSocket(`ws://localhost:${wsPort}`);

        ws.onopen = () => {
            log.info("‚úÖ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            retryDelay = INITIAL_RECONNECT_DELAY;
            totalWaitTime = 0;
        };

        ws.onerror = (error) => log.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error);

        ws.onmessage = async (msg) => {
            log.debug("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket:", msg);

            try {
                const data = JSON.parse(msg.data);

                if (data.type === "reload") {
                    log.info("‚ôªÔ∏è –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏");

                    const reload = async () => {
                        await sendToBackground({ type: "RELOAD" });
                        log.info("üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
                        location.reload();
                    };

                    if (document.visibilityState === "visible" && !document.hidden) {
                        await reload();
                    } else {
                        log.info("‚è∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∂–¥—ë–º –≤–∏–¥–∏–º–æ—Å—Ç–∏...");
                        await new Promise<void>((resolve) => {
                            const handleVisibilityChange = () => {
                                if (document.visibilityState === "visible" && !document.hidden) {
                                    document.removeEventListener("visibilitychange", handleVisibilityChange);
                                    resolve();
                                }
                            };
                            document.addEventListener("visibilitychange", handleVisibilityChange);
                        });
                        await reload();
                    }
                }
            } catch (error) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:", error);
            }
        };

        ws.onclose = (event) => {
            log.info(`‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç (–∫–æ–¥: ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"})`);
            totalWaitTime += retryDelay;

            if (totalWaitTime >= MAX_RECONNECT_TIME) {
                log.error(`‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è (${MAX_RECONNECT_TIME / 1000} —Å–µ–∫), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
                return;
            }

            log.info(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${retryDelay / 1000} —Å–µ–∫...`);
            setTimeout(() => {
                retryDelay = Math.min(retryDelay + RECONNECT_STEP, MAX_RECONNECT_TIME);
                log.info(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${retryDelay / 1000} —Å–µ–∫)`);
                connect();
            }, retryDelay);
        };

        return ws;
    };

    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try {
        connect();
    } catch (error) {
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:", error);
        log.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
        setTimeout(connect, 5000);
    }
}
