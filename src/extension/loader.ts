import { sendToContent } from "./utils/communication"
import { extLogger } from "../logger"
import { chatSettings, currentUser, extensionUrl, settings } from "../storage"
import type { DatabaseTables } from "../types"
import { toRaw, watch } from "vue"
import Settings from "../vue/header/settings.vue"
import Chat from "../vue/header/chat.vue"
import SearchUsersHeader from "../vue/header/search.vue"
import { routes } from "../routes"
import { debounce } from "../utils/debounce"
import { getExtUrl } from "../utils/getExtUrl"
import { loadVue } from "../utils/loadVue"
import { getCurrentUser } from "../utils/getCurrentUser"
import { initLastDialogs, initLastNotifications } from "../utils/initHeaderLast"

const log = new extLogger("extension/loader.ts")

// ====================
// üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
// ====================
/**
 * –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –æ–±—ä–µ–∫—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏
 * –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–∫—Ä–∏–ø—Ç—É —Å debounce.
 */
function watchStorageChanges<T extends object>(table: string, obj: T): void {
	const sendUpdate = debounce(async (data: T) => {
		log.info("Store update", table, data)

		await sendToContent<{}, { info: string }>({
			type: "SAVE_DATABASE",
			payload: { table, data: toRaw(data) },
		})
	}, 500)

	watch(obj, sendUpdate, { deep: true })
}

// ====================
// ‚öôÔ∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
// ====================
/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —à–∞–ø–∫—É —Å–∞–π—Ç–∞.
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç Vue-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 */
function initButtonSettings(): void {
	const li = createHeaderItem(getExtUrl("assets/settings.svg"), "settings")

	const loadComponent = () => {
		li.removeEventListener("click", loadComponent)
		loadVue(li, Settings)
	}

	li.addEventListener("click", loadComponent)
	insertHeaderItem(li)
}

// ====================
// üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
// ====================
/**
 * –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞ –≤ —à–∞–ø–∫—É, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
 */
function initChat(): void {
	const li = createHeaderItem()
	loadVue(li, Chat)
	insertHeaderItem(li)
}

// ====================
// üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —à–∞–ø–∫–µ
// ====================
/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —à–∞–ø–∫—É.
 */
export function initSearchUsersHeader(): void {
	const searchButton = document.querySelector(".header__link-search__button")

	const loadComponent = () => {
		searchButton?.removeEventListener("click", loadComponent)

		const searchContainer = document.querySelector(".header__item-search")
		if (!searchContainer) return

		const searchComponent = document.createElement("div")
		searchComponent.classList.add("searchHeaderElement")
		searchContainer.appendChild(searchComponent)

		loadVue(searchComponent, SearchUsersHeader)
	}

	searchButton?.addEventListener("click", loadComponent)
}

// ====================
// üß© –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
// ====================
/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –∏–∑ routes,
 * —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—É—â–µ–º—É URL.
 */
async function loadScripts(baseUrl: string): Promise<void> {
	for (const route of routes) {
		if (new RegExp(route.pattern).test(location.pathname)) {
			for (const script of route.scripts) {
				const module = await import(`${baseUrl}${script}`)
				if (module.default) await module.default(settings)
			}
		}
	}
}

// ====================
// üß± –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ====================
/**
 * –°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ —à–∞–ø–∫–µ —Å –∏–∫–æ–Ω–∫–æ–π.
 */
function createHeaderItem(iconUrl?: string, altText?: string): HTMLLIElement {
	const li = document.createElement("li")
	li.classList.add("header__item")
	li.style.cursor = "pointer"

	if (iconUrl) {
		const a = document.createElement("a")
		a.classList.add("header__link")

		const img = document.createElement("img")
		img.src = iconUrl
		img.alt = altText || ""

		a.appendChild(img)
		li.appendChild(a)
	}

	return li
}

/**
 * –í—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —à–∞–ø–∫—É —Å–∞–π—Ç–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –ø–æ–∏—Å–∫–∞.
 */
function insertHeaderItem(li: HTMLLIElement): void {
	const headerList = document.querySelector(".header__list")
	const searchItem = headerList?.querySelector(".header__item-search")
	if (headerList && searchItem) headerList.insertBefore(li, searchItem)
}

// ====================
// üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
// ====================
export default function initExtension(data: {
	extensionUrl: string
	database: DatabaseTables
}): void {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	extensionUrl.value = data.extensionUrl

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
	Object.assign(currentUser, data.database.currentUser)
	Object.assign(chatSettings, data.database.chatSettings)
	Object.assign(settings, data.database.settings)

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const user = getCurrentUser()
	Object.assign(currentUser, {
		id: user.id,
		nickname: user.nickname,
		avatar: user.avatar,
	})

	// –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö
	watchStorageChanges("currentUser", currentUser)
	watchStorageChanges("chatSettings", chatSettings)
	watchStorageChanges("settings", settings)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
	initButtonSettings()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
	if (settings.chatEnabled) initChat()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º
	loadScripts(data.extensionUrl)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω –∏ –ø–æ–∏—Å–∫–∞
	if (settings.showRecentDialogsOnHover) initLastDialogs()
	if (settings.showRecentNotificationsOnHover) initLastNotifications()
	if (settings.searchUsersHeader) initSearchUsersHeader()
}
